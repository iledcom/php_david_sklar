<?php
//Как получить текущий URL в PHP?

//Сформировать текущий адрес страницы можно с помощью элементов массива $_SERVER. Рассмотрим на примере URL:

//https://example.com/category/page?sort=asc

//Полный URL

$url = ((!empty($_SERVER['HTTPS'])) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
echo $url;

//Результат: https://example.com/category/page?sort=asc

//URL без GET-параметров
$url = ((!empty($_SERVER['HTTPS'])) ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
$url = explode('?', $url);
$url = $url[0];
 
echo $url;

//Результат: https://example.com/category/page

//Основной путь и GET-параметры

$url = $_SERVER['REQUEST_URI'];
echo $url;

//Результат: /category/page?sort=asc

//Только основной путь

$url = $_SERVER['REQUEST_URI'];
$url = explode('?', $url);
$url = $url[0];
 
echo $url;

//Результат: /category/page

//Только GET-параметры

echo $_SERVER['QUERY_STRING'];

//Результат: sort=asc

//Для преобразования строки с GET-параметрами в ассоциативный массив можно применить функцию parse_str()

parse_str('sort=asc&page=2&brand=rich', $get);
print_r($get);

//Результат:

Array
(
    [sort] => asc
    [page] => 2
    [brand] => rich
);



//часть с  курса Михаила Русакова php.i.mysql.2.0  

	$url = 'http://myrusakov.ru/abc.html?id=7&page=8&x=9';
  echo $url.'<br />';
   
 /*parse_url — Разбирает URL и возвращает его компоненты
	Эта функция разбирает URL и возвращает ассоциативный массив, содержащий все компоненты URL, которые в нём присутствуют. 
	Элементы массива не будут декодированы как URL.

	Эта функция не предназначена для проверки на корректность данного URL, она только разбивает его на нижеперечисленные части. 
	Частичные URL также принимаются, parse_url() пытается сделать всё возможное, чтобы разобрать их корректно.
	Список параметров

	url
	URL для разбора. Недопустимые символы будут заменены на знаки подчёркивания _.

	component
	Укажите одну из констант PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY 
	или PHP_URL_FRAGMENT, чтобы получить только конкретный компонент URL в виде строки (string). 
	Исключением является указание PHP_URL_PORT, в этом случае возвращаемое значение будет типа int.
 */

	$arr = parse_url($url);
  print_r($arr);
  echo '<br />';


  //parse_str — Разбирает строку в переменные
	parse_str ( string $string , array &$result ) : void
	/*
	Разбирает строку string, которая должна иметь формат строки запроса URL и присваивает значения переменным в текущем контексте 
	(или заносит в массив, если задан параметр result).

	Список параметров 
	string
	Входная строка.

	result
	Если указан второй параметр result, то вместо присвоения переменных в текущем контексте они будут сохранены в этом параметре в качестве элементов массива.

	Внимание
	Использовать эту функцию без параметра result крайне НЕ РЕКОМЕНДУЕТСЯ. Подобное использование объявлено УСТАРЕВШИМ с PHP 7.2.
  */

	parse_str($arr['query'], $query);	
  $query['y'] = 10;
  unset($query['x']);
  print_r($query);
  echo '<br />';

  
  //http_build_query — Генерирует URL-кодированную строку запроса
  http_build_query ( mixed $query_data , string $numeric_prefix = ? , string $arg_separator = ? , int $enc_type = PHP_QUERY_RFC1738 ) : string

  /*
	Генерирует URL-кодированную строку запроса из предоставленного ассоциативного (или индексированного) массива.

	Список параметров
	query_data
	Может быть массив или объект, содержащий свойства.

	Если query_data массив, то он может быть простой одномерной структурой или массивом массивов (который, в свою очередь, может содержать другие массивы).

	Если query_data объект, тогда только общедоступные свойства будут включены в результат.

	numeric_prefix
	Если числовые индексы используются в базовом массиве и этот параметр указан, то он будет добавлен к числовому индексу для элементов только в базовом массиве.

	Это позволяет обеспечить допустимые имена переменных, в которые позже данные будут декодированы PHP или другим CGI-приложением.

	arg_separator
	arg_separator.output используется в качестве разделителя аргументов, но может быть переопределён путём указания этого параметра.

	enc_type
	По умолчанию PHP_QUERY_RFC1738.

	Если enc_type равен PHP_QUERY_RFC1738, тогда кодирование осуществляется по » RFC 1738 и типу контента application/x-www-form-urlencoded, что подразумевает, что пробелы кодируются как символы "плюс" (+).

	Если enc_type равен PHP_QUERY_RFC3986, тогда кодирование осуществляется в соответствии с » RFC 3986, а пробелы будут закодированы в процентах (%20).

	Возвращаемые значения

	Возвращает URL-кодированную строку
  */
  $query = http_build_query($query);

  echo $query.'<br />';

  $url = $arr['scheme'].'://'.$arr['host'].$arr['path'].'?'.$query;

  echo $url.'<br />';

  //Удаление параметров

  unset($query['x']);

